#include <iostream>
#include <vector>
using namespace std;

int findEquilibriumIndex(const vector<int>& arr) {
    int n = arr.size();
    
    if (n == 0) return -1;

    // Calculate the total sum of the array
    int total_sum = 0;
    for (int num : arr) {
        total_sum += num;
    }

    int left_sum = 0;
    
    // Traverse the array and check for equilibrium
    for (int i = 0; i < n; ++i) {
        // Right sum is total_sum - left_sum - arr[i]
        int right_sum = total_sum - left_sum - arr[i];
        
        // If left sum equals right sum, we found the equilibrium index
        if (left_sum == right_sum) {
            return i + 1;  // 1-based indexing
        }
        
        // Update left_sum for the next index
        left_sum += arr[i];
    }
    
    // If no equilibrium index is found, return -1
    return -1;
}

int main() {
    vector<int> arr1 = {-7, 1, 5, 2, -4, 3, 0};
    vector<int> arr2 = {1, 2, 3};
    vector<int> arr3 = {1, 3, 5, 2, 2};
    
    cout << "Equilibrium index in arr1: " << findEquilibriumIndex(arr1) << endl;
    cout << "Equilibrium index in arr2: " << findEquilibriumIndex(arr2) << endl;
    cout << "Equilibrium index in arr3: " << findEquilibriumIndex(arr3) << endl;
    
    return 0;
}
