#include <iostream>
#include <vector>
using namespace std;

// Merge function to count inversions
int mergeAndCount(vector<int>& arr, int left, int right) {
    if (left == right)
        return 0;

    int mid = left + (right - left) / 2;
    
    // Count inversions in left half, right half and then during merging
    int inv_count = mergeAndCount(arr, left, mid);
    inv_count += mergeAndCount(arr, mid + 1, right);

    // Merge the two halves and count inversions during the merge
    inv_count += merge(arr, left, mid, right);

    return inv_count;
}

// Merge function to merge two sorted halves and count inversions
int merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Temporary arrays to hold the left and right subarrays
    vector<int> leftArr(n1), rightArr(n2);

    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        rightArr[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left, inv_count = 0;

    // Merge the two subarrays and count inversions
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            inv_count += (n1 - i);  // All remaining elements in leftArr are greater than rightArr[j]
            j++;
        }
        k++;
    }

    // Copy remaining elements of leftArr[], if any
    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    // Copy remaining elements of rightArr[], if any
    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }

    return inv_count;
}

int countInversions(vector<int>& arr) {
    return mergeAndCount(arr, 0, arr.size() - 1);
}

int main() {
    vector<int> arr = {7, 2, 6, 3};
    cout << "Number of inversions: " << countInversions(arr) << endl;
    return 0;
}
